{"file": {"path": "/home/steve/Master Thesis/ML-Metadata-Extraction/dataset-metadata/heart_failure_prediction_MLExample.py", "fileNameBase": "heart_failure_prediction_MLExample", "extension": "py"}, "dependencies": [{"import": "pandas", "alias": "pd", "type": "external", "type_element": "module"}, {"import": "numpy", "alias": "np", "type": "external", "type_element": "module"}, {"import": "matplotlib", "alias": "plt", "type": "external", "type_element": "module"}, {"import": "seaborn", "alias": "sns", "type": "external", "type_element": "module"}, {"import": "warnings", "type": "external", "type_element": "module"}, {"from_module": "sklearn.preprocessing", "import": "LabelEncoder", "type": "external", "type_element": "module"}, {"from_module": "sklearn.preprocessing", "import": "MinMaxScaler", "type": "external", "type_element": "module"}, {"from_module": "sklearn.preprocessing", "import": "StandardScaler", "type": "external", "type_element": "module"}, {"from_module": "sklearn.feature_selection", "import": "SelectKBest", "type": "external", "type_element": "module"}, {"from_module": "sklearn.feature_selection", "import": "chi2", "type": "external", "type_element": "module"}, {"from_module": "sklearn.feature_selection", "import": "f_classif", "type": "external", "type_element": "module"}, {"from_module": "sklearn.model_selection", "import": "train_test_split", "type": "external", "type_element": "module"}, {"from_module": "sklearn.metrics", "import": "confusion_matrix", "type": "external", "type_element": "module"}, {"from_module": "sklearn.metrics", "import": "roc_auc_score", "type": "external", "type_element": "module"}, {"from_module": "sklearn.metrics", "import": "plot_roc_curve", "type": "external", "type_element": "module"}, {"from_module": "sklearn.model_selection", "import": "cross_val_score", "type": "external", "type_element": "module"}, {"from_module": "sklearn.model_selection", "import": "GridSearchCV", "type": "external", "type_element": "module"}, {"from_module": "sklearn.metrics", "import": "classification_report", "type": "external", "type_element": "module"}, {"from_module": "sklearn.metrics", "import": "accuracy_score", "type": "external", "type_element": "module"}, {"from_module": "sklearn.model_selection", "import": "RepeatedStratifiedKFold", "type": "external", "type_element": "module"}, {"from_module": "sklearn.metrics", "import": "precision_recall_curve", "type": "external", "type_element": "module"}, {"from_module": "sklearn.linear_model", "import": "LogisticRegression", "type": "external", "type_element": "module"}, {"from_module": "sklearn.svm", "import": "SVC", "type": "external", "type_element": "module"}, {"from_module": "sklearn.tree", "import": "DecisionTreeClassifier", "type": "external", "type_element": "module"}, {"from_module": "sklearn.ensemble", "import": "RandomForestClassifier", "type": "external", "type_element": "module"}, {"from_module": "sklearn.neighbors", "import": "KNeighborsClassifier", "type": "external", "type_element": "module"}], "functions": {"data_info": {"args": ["data"], "min_max_lineno": {"min_lineno": 29, "max_lineno": 32}, "calls": ["data.info", "print"]}, "classify_features": {"min_max_lineno": {"min_lineno": 33, "max_lineno": 43}, "calls": ["list", "print", "len", "numerical_features.append", "categorical_features.append", "data[].unique"], "store_vars_calls": {"col": "list"}}, "transform_features": {"min_max_lineno": {"min_lineno": 44, "max_lineno": 65}, "calls": ["sklearn.preprocessing.LabelEncoder", "sklearn.preprocessing.MinMaxScaler", "sklearn.preprocessing.StandardScaler", "sklearn.preprocessing.MinMaxScaler.fit_transform", "sklearn.preprocessing.StandardScaler.fit_transform", "print", "sklearn.preprocessing.LabelEncoder.fit_transform", "df1.head"], "store_vars_calls": {"le": "LabelEncoder", "mms": "MinMaxScaler", "ss": "StandardScaler"}}, "make_featureMD": {"min_max_lineno": {"min_lineno": 66, "max_lineno": 80}, "calls": ["pandas.DataFrame", "pd.DataFrame.to_csv"], "store_vars_calls": {"feature_MD": "pd.DataFrame"}}, "make_paramMD": {"min_max_lineno": {"min_lineno": 81, "max_lineno": 91}, "calls": ["pandas.DataFrame", "pd.DataFrame.to_csv"], "store_vars_calls": {"param_MLMD": "pd.DataFrame"}}, "make_modelMD": {"min_max_lineno": {"min_lineno": 93, "max_lineno": 104}, "calls": ["pandas.DataFrame", "pd.DataFrame.to_csv"], "store_vars_calls": {"ML_results_model_MD": "pd.DataFrame"}}, "make_model_evaluationMD": {"min_max_lineno": {"min_lineno": 105, "max_lineno": 118}, "calls": ["pandas.DataFrame", "pd.DataFrame.to_csv"], "store_vars_calls": {"ML_results_model_evaluation_MD": "pd.DataFrame"}}, "filter_params": {"args": ["df1"], "returns": ["df1"], "min_max_lineno": {"min_lineno": 120, "max_lineno": 141}, "calls": ["categorical_df.drop.drop", "numerical_df.corrwith().to_frame", "categorical_df.drop.corrwith().to_frame", "categorical_df.corrwith().to_frame.iterrows", "numerical_df.corrwith().to_frame.iterrows", "print", "numerical_df.corrwith", "categorical_df.drop.corrwith", "abs", "df1.drop.drop", "dropped_boolean.append"], "store_vars_calls": {"categorical_df": "categorical_df.drop", "corr_numerical": "numerical_df.corrwith().to_frame", "corr_category": "categorical_df.corrwith().to_frame", "df1": "df1.drop"}}, "mean_value_features": {"args": ["data"], "min_max_lineno": {"min_lineno": 143, "max_lineno": 159}, "calls": ["matplotlib.subplots", "matplotlib.subplot", "seaborn.heatmap", "matplotlib.title", "fig.tight_layout", "matplotlib.show", "data[].describe"]}, "model": {"args": ["classifier", "MLA_name"], "min_max_lineno": {"min_lineno": 164, "max_lineno": 180}, "calls": ["classifier.fit", "classifier.predict", "sklearn.model_selection.RepeatedStratifiedKFold", "ML_name.append", "did.append", "accuracy.append", "print", "cross_validation_score.append", "ROC_AUC_score.append", "sklearn.metrics.plot_roc_curve", "matplotlib.title", "matplotlib.show", "sklearn.metrics.accuracy_score", "sklearn.model_selection.cross_val_score().mean", "sklearn.metrics.roc_auc_score", "sklearn.model_selection.cross_val_score"], "store_vars_calls": {"prediction": "classifier.predict", "cv": "RepeatedStratifiedKFold"}}, "model_evaluation": {"args": ["classifier", "ML_name"], "min_max_lineno": {"min_lineno": 182, "max_lineno": 206}, "calls": ["sklearn.metrics.classification_report", "print", "classifier.predict", "model_eval_kaggleID.append", "model_eval_ML_name.append", "model_eval_name.append", "model_eval_precision.append", "model_eval_recall.append", "model_eval_f1_score.append", "model_eval_support.append"], "store_vars_calls": {"class_report": "classification_report", "class_report_dict": "classification_report"}}, "lr_exec_and_MD": {"args": ["random_state", "C", "penalty"], "min_max_lineno": {"min_lineno": 207, "max_lineno": 215}, "calls": ["sklearn.linear_model.LogisticRegression", "sklearn.linear_model.LogisticRegression.get_params", "heart_failure_prediction_MLExample.param_extraction", "heart_failure_prediction_MLExample.model", "heart_failure_prediction_MLExample.model_evaluation"], "store_vars_calls": {"classifier_lr": "LogisticRegression", "params": "classifier_lr.get_params"}}, "svc_exec_and_MD": {"args": ["kernel", "C"], "min_max_lineno": {"min_lineno": 216, "max_lineno": 224}, "calls": ["sklearn.svm.SVC", "sklearn.svm.SVC.get_params", "heart_failure_prediction_MLExample.param_extraction", "heart_failure_prediction_MLExample.model", "heart_failure_prediction_MLExample.model_evaluation"], "store_vars_calls": {"classifier_svc": "SVC", "params": "classifier_svc.get_params"}}, "dt_exec_and_MD": {"args": ["random_state", "max_depth", "min_samples_leaf"], "min_max_lineno": {"min_lineno": 225, "max_lineno": 233}, "calls": ["sklearn.tree.DecisionTreeClassifier", "sklearn.tree.DecisionTreeClassifier.get_params", "heart_failure_prediction_MLExample.param_extraction", "heart_failure_prediction_MLExample.model", "heart_failure_prediction_MLExample.model_evaluation"], "store_vars_calls": {"classifier_dt": "DecisionTreeClassifier", "params": "classifier_dt.get_params"}}, "rf_exec_and_MD": {"args": ["max_depth", "random_state"], "min_max_lineno": {"min_lineno": 234, "max_lineno": 242}, "calls": ["sklearn.ensemble.RandomForestClassifier", "sklearn.ensemble.RandomForestClassifier.get_params", "heart_failure_prediction_MLExample.param_extraction", "heart_failure_prediction_MLExample.model", "heart_failure_prediction_MLExample.model_evaluation"], "store_vars_calls": {"classifier_rf": "RandomForestClassifier", "params": "classifier_rf.get_params"}}, "knn_exec_and_MD": {"args": ["leaf_size", "n_neighbors", "p"], "min_max_lineno": {"min_lineno": 243, "max_lineno": 251}, "calls": ["sklearn.neighbors.KNeighborsClassifier", "sklearn.neighbors.KNeighborsClassifier.get_params", "heart_failure_prediction_MLExample.param_extraction", "heart_failure_prediction_MLExample.model", "heart_failure_prediction_MLExample.model_evaluation"], "store_vars_calls": {"classifier_knn": "KNeighborsClassifier", "params": "classifier_knn.get_params"}}, "chi_squared_score": {"args": ["df1"], "min_max_lineno": {"min_lineno": 254, "max_lineno": 276}, "calls": ["sklearn.feature_selection.SelectKBest", "sklearn.feature_selection.SelectKBest.fit", "pandas.DataFrame", "print", "pd.DataFrame.iterrows", "kaggle_id.append", "feature_name.append", "categorical_boolean.append", "numerical_boolean.append", "chi_square_score.append", "ANOVA_scor.append", "list", "str"], "store_vars_calls": {"best_features": "SelectKBest", "fit": "best_features.fit", "featureScores": "pd.DataFrame"}}, "ANOVA_score": {"args": ["df1"], "min_max_lineno": {"min_lineno": 277, "max_lineno": 294}, "calls": ["sklearn.feature_selection.SelectKBest", "sklearn.feature_selection.SelectKBest.fit", "pandas.DataFrame", "print", "pd.DataFrame.iterrows", "kaggle_id.append", "feature_name.append", "categorical_boolean.append", "numerical_boolean.append", "chi_square_score.append", "ANOVA_scor.append", "list", "str"], "store_vars_calls": {"best_features": "SelectKBest", "fit": "best_features.fit", "featureScores": "pd.DataFrame"}}, "param_extraction": {"args": ["params", "model_name"], "min_max_lineno": {"min_lineno": 295, "max_lineno": 301}, "calls": ["params.items", "kaggle_id.append", "MLparam_name.append", "param_name.append", "param_value.append"]}}, "body": {"calls": ["warnings.filterwarnings", "pandas.read_csv", "heart_failure_prediction_MLExample.classify_features", "pd.read_csv.copy", "heart_failure_prediction_MLExample.transform_features", "heart_failure_prediction_MLExample.chi_squared_score", "heart_failure_prediction_MLExample.ANOVA_score", "heart_failure_prediction_MLExample.filter_params", "heart_failure_prediction_MLExample.make_featureMD", "filter_params.columns.drop", "sklearn.model_selection.train_test_split", "heart_failure_prediction_MLExample.lr_exec_and_MD", "heart_failure_prediction_MLExample.svc_exec_and_MD", "heart_failure_prediction_MLExample.dt_exec_and_MD", "heart_failure_prediction_MLExample.rf_exec_and_MD", "heart_failure_prediction_MLExample.knn_exec_and_MD", "heart_failure_prediction_MLExample.make_paramMD", "heart_failure_prediction_MLExample.make_modelMD", "heart_failure_prediction_MLExample.make_model_evaluationMD"], "store_vars_calls": {"data": "pd.read_csv", "df1": "filter_params", "null": "train_test_split"}}, "main_info": {"main_flag": 1, "main_function": "heart_failure_prediction_MLExample.pd.read_csv", "type": "script"}, "is_test": false}